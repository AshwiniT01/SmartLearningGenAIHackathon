import boto3
import json

class BedrockModelInvoker:
    def __init__(self, model_id, max_tokens=4096, temperature=0.5, top_k=250, top_p=0.5):
        """
        Initializes the BedrockModelInvoker.
        
        :param model_id: ID of the Bedrock model to invoke.
        :param max_tokens: Maximum number of tokens to generate.
        :param temperature: Sampling temperature.
        :param top_k: Number of highest-probability vocabulary tokens to keep for sampling.
        :param top_p: Cumulative probability for nucleus sampling.
        """
        self.model_id = model_id
        self.max_tokens = max_tokens
        self.temperature = temperature
        self.top_k = top_k
        self.top_p = top_p
        self.client = boto3.client("bedrock-runtime")
    
    def invoke(self, prompt):
        """
        Invokes the Bedrock model with the specified prompt.
        
        :param prompt: The input text prompt for the model.
        :return: The response text generated by the model.
        """
        body = json.dumps({
            "anthropic_version": "bedrock-2023-05-31",
            "max_tokens": self.max_tokens,
            "temperature": self.temperature,
            "top_k": self.top_k,
            "top_p": self.top_p,
            "messages": [
                {
                    "role": "user",
                    "content": [{"type": "text", "text": prompt}]
                }
            ],
        })

        try:
            response = self.client.invoke_model(
                body=body,
                modelId=self.model_id,
                accept='application/json',
                contentType='application/json'
            )
            response_body = json.loads(response.get('body').read())
            return response_body["content"][0]["text"]
        except Exception as e:
            raise RuntimeError(f"Error invoking Bedrock model: {str(e)}")
